# Generated by Django 5.2.1 on 2025-07-17 13:53

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('xstudent', '0006_attendance_attendancesummary'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_code', models.CharField(max_length=20, unique=True, verbose_name='Vendor Code')),
                ('company_name', models.CharField(max_length=200, verbose_name='Company Name')),
                ('trade_license', models.CharField(max_length=100, unique=True, verbose_name='Trade License')),
                ('contact_person', models.CharField(max_length=100, verbose_name='Contact Person')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('mobile', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Mobile number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Mobile Number')),
                ('address', models.TextField(verbose_name='Address')),
                ('area', models.CharField(max_length=100, verbose_name='Area')),
                ('city', models.CharField(default='Kuwait City', max_length=100, verbose_name='City')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('vehicle_type', models.CharField(choices=[('bus', 'Bus'), ('van', 'Van'), ('car', 'Car'), ('taxi', 'Taxi'), ('other', 'Other')], max_length=20, verbose_name='Primary Vehicle Type')),
                ('fleet_size', models.PositiveIntegerField(verbose_name='Fleet Size')),
                ('service_areas', models.TextField(help_text='Areas covered by this vendor', verbose_name='Service Areas')),
                ('rate_per_km', models.DecimalField(decimal_places=3, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Rate per KM (KWD)')),
                ('monthly_rate', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Monthly Rate (KWD)')),
                ('security_deposit', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Security Deposit (KWD)')),
                ('contract_start_date', models.DateField(blank=True, null=True, verbose_name='Contract Start Date')),
                ('contract_end_date', models.DateField(blank=True, null=True, verbose_name='Contract End Date')),
                ('payment_terms', models.CharField(default='Net 30', max_length=100, verbose_name='Payment Terms')),
                ('trade_license_copy', models.FileField(blank=True, upload_to='vendor_documents/', verbose_name='Trade License Copy')),
                ('insurance_copy', models.FileField(blank=True, upload_to='vendor_documents/', verbose_name='Insurance Copy')),
                ('vehicle_registration', models.FileField(blank=True, upload_to='vendor_documents/', verbose_name='Vehicle Registration')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('blacklisted', 'Blacklisted'), ('pending_approval', 'Pending Approval')], default='pending_approval', max_length=20)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('5.00'))], verbose_name='Rating (out of 5)')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total Reviews')),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_vendors', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vendors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='MonthlyPaymentGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generation_id', models.CharField(max_length=20, unique=True, verbose_name='Generation ID')),
                ('payment_month', models.DateField(verbose_name='Payment Month')),
                ('exclude_inactive', models.BooleanField(default=True, verbose_name='Exclude Inactive Vendors')),
                ('include_tax', models.BooleanField(default=True, verbose_name='Include Tax')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('5.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Tax Rate (%)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('generated', 'Generated'), ('approved', 'Approved'), ('paid', 'Paid')], default='draft', max_length=20)),
                ('total_vendors', models.PositiveIntegerField(default=0, verbose_name='Total Vendors')),
                ('total_students', models.PositiveIntegerField(default=0, verbose_name='Total Students')),
                ('total_amount', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=15, verbose_name='Total Amount (KWD)')),
                ('generation_date', models.DateTimeField(blank=True, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, verbose_name='Generation Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payment_generations', to=settings.AUTH_USER_MODEL)),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_transport_payments', to=settings.AUTH_USER_MODEL)),
                ('vendors', models.ManyToManyField(to='xtransport.vendor', verbose_name='Vendors')),
            ],
            options={
                'verbose_name': 'Monthly Payment Generation',
                'verbose_name_plural': 'Monthly Payment Generations',
                'ordering': ['-payment_month'],
            },
        ),
        migrations.CreateModel(
            name='VendorPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=20, unique=True, verbose_name='Payment ID')),
                ('payment_type', models.CharField(choices=[('monthly', 'Monthly Payment'), ('advance', 'Advance Payment'), ('adjustment', 'Adjustment'), ('bonus', 'Bonus'), ('penalty', 'Penalty')], default='monthly', max_length=20)),
                ('amount', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Amount (KWD)')),
                ('tax_amount', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Tax Amount (KWD)')),
                ('total_amount', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Total Amount (KWD)')),
                ('payment_month', models.DateField(blank=True, null=True, verbose_name='Payment Month')),
                ('from_date', models.DateField(blank=True, null=True, verbose_name='From Date')),
                ('to_date', models.DateField(blank=True, null=True, verbose_name='To Date')),
                ('student_count', models.PositiveIntegerField(default=0, verbose_name='Number of Students')),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('cash', 'Cash'), ('online', 'Online Payment')], max_length=20, verbose_name='Payment Method')),
                ('reference_number', models.CharField(blank=True, max_length=100, verbose_name='Reference Number')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Payment Date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('paid', 'Paid'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='pending', max_length=20)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=50, verbose_name='Invoice Number')),
                ('receipt_uploaded', models.FileField(blank=True, upload_to='vendor_receipts/', verbose_name='Receipt/Invoice')),
                ('description', models.TextField(verbose_name='Payment Description')),
                ('notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_vendor_payments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vendor_payments', to=settings.AUTH_USER_MODEL)),
                ('students_covered', models.ManyToManyField(blank=True, to='xstudent.newstudent', verbose_name='Students Covered')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='xtransport.vendor')),
            ],
            options={
                'verbose_name': 'Vendor Payment',
                'verbose_name_plural': 'Vendor Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VendorRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=20, unique=True, verbose_name='Request ID')),
                ('submission_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('company_name', models.CharField(max_length=200, verbose_name='Company Name')),
                ('trade_license', models.CharField(max_length=100, verbose_name='Trade License')),
                ('contact_person', models.CharField(max_length=100, verbose_name='Contact Person')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('vehicle_type', models.CharField(choices=[('bus', 'Bus'), ('van', 'Van'), ('car', 'Car'), ('taxi', 'Taxi'), ('other', 'Other')], max_length=20, verbose_name='Primary Vehicle Type')),
                ('fleet_size', models.PositiveIntegerField(verbose_name='Fleet Size')),
                ('service_areas', models.TextField(verbose_name='Service Areas')),
                ('proposed_rate_per_km', models.DecimalField(decimal_places=3, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Proposed Rate per KM (KWD)')),
                ('trade_license_copy', models.FileField(upload_to='vendor_requests/', verbose_name='Trade License Copy')),
                ('insurance_copy', models.FileField(upload_to='vendor_requests/', verbose_name='Insurance Copy')),
                ('vehicle_registration', models.FileField(upload_to='vendor_requests/', verbose_name='Vehicle Registration')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('requires_documents', 'Requires Additional Documents')], default='submitted', max_length=20)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('review_comments', models.TextField(blank=True, verbose_name='Review Comments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_vendor', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='original_request', to='xtransport.vendor')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_vendor_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendor Request',
                'verbose_name_plural': 'Vendor Requests',
                'ordering': ['-submission_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentTransportAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transport_type', models.CharField(choices=[('pickup_only', 'Pickup Only'), ('drop_only', 'Drop Only'), ('both_ways', 'Both Ways')], default='both_ways', max_length=20)),
                ('pickup_address', models.TextField(verbose_name='Pickup Address')),
                ('drop_address', models.TextField(blank=True, verbose_name='Drop Address')),
                ('pickup_time', models.TimeField(verbose_name='Pickup Time')),
                ('drop_time', models.TimeField(blank=True, null=True, verbose_name='Drop Time')),
                ('monthly_rate', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Monthly Rate (KWD)')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('emergency_contact', models.CharField(max_length=100, verbose_name='Emergency Contact Person')),
                ('emergency_phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Emergency Phone Number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('special_instructions', models.TextField(blank=True, verbose_name='Special Instructions')),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_assignments', to='xstudent.newstudent')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_assignments', to='xtransport.vendor')),
            ],
            options={
                'verbose_name': 'Student Transport Assignment',
                'verbose_name_plural': 'Student Transport Assignments',
                'ordering': ['-created_at'],
                'unique_together': {('student', 'vendor', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='VendorRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating (1-5)')),
                ('review', models.TextField(blank=True, verbose_name='Review Comments')),
                ('punctuality_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Punctuality (1-5)')),
                ('safety_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Safety (1-5)')),
                ('driver_behavior_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Driver Behavior (1-5)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_ratings', to='xstudent.newstudent')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='xtransport.vendor')),
            ],
            options={
                'verbose_name': 'Vendor Rating',
                'verbose_name_plural': 'Vendor Ratings',
                'ordering': ['-created_at'],
                'unique_together': {('vendor', 'student')},
            },
        ),
    ]
