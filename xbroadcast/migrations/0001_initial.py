# Generated by Django 5.2.1 on 2025-07-17 13:53

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('xbatch', '0001_initial'),
        ('xcoursefee', '0002_kit_coursekit_kitfee'),
        ('xstudent', '0006_attendance_attendancesummary'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BroadcastTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Template Name')),
                ('template_type', models.CharField(choices=[('general', 'General'), ('new_batch', 'New Batch'), ('holiday', 'Holiday'), ('fee_reminder', 'Fee Reminder'), ('exam_notice', 'Exam Notice'), ('event', 'Event Announcement'), ('promotion', 'Promotion'), ('welcome', 'Welcome Message'), ('completion', 'Course Completion')], max_length=20, verbose_name='Template Type')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject/Title')),
                ('message_content', models.TextField(verbose_name='Message Content')),
                ('sms_content', models.TextField(blank=True, verbose_name='SMS Content (160 chars max)')),
                ('variables_description', models.TextField(blank=True, help_text='Describe available variables like {student_name}, {course_name}, etc.', verbose_name='Variables Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Template')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Broadcast Template',
                'verbose_name_plural': 'Broadcast Templates',
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Broadcast Title')),
                ('broadcast_type', models.CharField(choices=[('general', 'General Broadcast'), ('batch_specific', 'Batch Specific'), ('course_specific', 'Course Specific'), ('fee_reminder', 'Fee Reminder'), ('lead_followup', 'Lead Follow-up'), ('custom', 'Custom Group')], max_length=20, verbose_name='Broadcast Type')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject/Title')),
                ('message_content', models.TextField(verbose_name='Message Content')),
                ('sms_content', models.TextField(blank=True, verbose_name='SMS Content')),
                ('target_all_students', models.BooleanField(default=False, verbose_name='Target All Students')),
                ('target_all_leads', models.BooleanField(default=False, verbose_name='Target All Leads')),
                ('target_grade_filter', models.CharField(blank=True, max_length=100, verbose_name='Grade Filter')),
                ('target_program_filter', models.CharField(blank=True, max_length=100, verbose_name='Program Filter')),
                ('target_fee_status_filter', models.CharField(blank=True, choices=[('paid', 'Paid'), ('pending', 'Pending'), ('overdue', 'Overdue')], max_length=20, verbose_name='Fee Status Filter')),
                ('channels', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('whatsapp', 'WhatsApp'), ('all', 'All Channels')], default='all', max_length=20, verbose_name='Channels')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20, verbose_name='Priority')),
                ('send_immediately', models.BooleanField(default=True, verbose_name='Send Immediately')),
                ('scheduled_time', models.DateTimeField(blank=True, null=True, verbose_name='Scheduled Time')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('sending', 'Sending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('total_recipients', models.PositiveIntegerField(default=0, verbose_name='Total Recipients')),
                ('sent_count', models.PositiveIntegerField(default=0, verbose_name='Successfully Sent')),
                ('failed_count', models.PositiveIntegerField(default=0, verbose_name='Failed')),
                ('delivery_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Delivery Rate (%)')),
                ('sms_cost', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='SMS Cost (KWD)')),
                ('email_cost', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Email Cost (KWD)')),
                ('whatsapp_cost', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='WhatsApp Cost (KWD)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('track_clicks', models.BooleanField(default=True, verbose_name='Track Link Clicks')),
                ('track_opens', models.BooleanField(default=True, verbose_name='Track Email Opens')),
                ('allow_replies', models.BooleanField(default=True, verbose_name='Allow Replies')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_broadcasts', to=settings.AUTH_USER_MODEL)),
                ('sent_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_broadcasts', to=settings.AUTH_USER_MODEL)),
                ('target_batches', models.ManyToManyField(blank=True, to='xbatch.batch', verbose_name='Target Batches')),
                ('target_courses', models.ManyToManyField(blank=True, to='xcoursefee.course', verbose_name='Target Courses')),
                ('target_students', models.ManyToManyField(blank=True, to='xstudent.newstudent', verbose_name='Target Students')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='broadcasts', to='xbroadcast.broadcasttemplate', verbose_name='Template Used')),
            ],
            options={
                'verbose_name': 'Broadcast',
                'verbose_name_plural': 'Broadcasts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_id', models.CharField(max_length=20, unique=True, verbose_name='Lead ID')),
                ('name', models.CharField(max_length=100, verbose_name='Lead Name')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('whatsapp_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='WhatsApp Number')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Age')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, verbose_name='Gender')),
                ('nationality', models.CharField(blank=True, max_length=100, verbose_name='Nationality')),
                ('preferred_time_slot', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), ('weekend', 'Weekend'), ('flexible', 'Flexible')], max_length=20, verbose_name='Preferred Time Slot')),
                ('budget_range', models.CharField(blank=True, max_length=100, verbose_name='Budget Range')),
                ('source', models.CharField(choices=[('website', 'Website'), ('social_media', 'Social Media'), ('referral', 'Referral'), ('advertisement', 'Advertisement'), ('walk_in', 'Walk-in'), ('phone_inquiry', 'Phone Inquiry'), ('email_inquiry', 'Email Inquiry'), ('event', 'Event/Exhibition'), ('partner', 'Partner'), ('other', 'Other')], max_length=20, verbose_name='Lead Source')),
                ('source_details', models.CharField(blank=True, max_length=200, verbose_name='Source Details')),
                ('referred_by', models.CharField(blank=True, max_length=100, verbose_name='Referred By')),
                ('status', models.CharField(choices=[('new', 'New Lead'), ('contacted', 'Contacted'), ('interested', 'Interested'), ('not_interested', 'Not Interested'), ('enrolled', 'Enrolled'), ('closed_lost', 'Closed - Lost'), ('invalid', 'Invalid')], default='new', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('hot', 'Hot Lead')], default='medium', max_length=20)),
                ('next_followup_date', models.DateField(blank=True, null=True, verbose_name='Next Follow-up Date')),
                ('last_contacted', models.DateTimeField(blank=True, null=True, verbose_name='Last Contacted')),
                ('contact_attempts', models.PositiveIntegerField(default=0, verbose_name='Contact Attempts')),
                ('enrollment_date', models.DateField(blank=True, null=True, verbose_name='Enrollment Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_leads', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_leads', to=settings.AUTH_USER_MODEL)),
                ('enrolled_student', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='original_lead', to='xstudent.newstudent', verbose_name='Enrolled Student')),
                ('interested_courses', models.ManyToManyField(blank=True, to='xcoursefee.course', verbose_name='Interested Courses')),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'Leads',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('call', 'Phone Call'), ('email', 'Email'), ('sms', 'SMS'), ('whatsapp', 'WhatsApp'), ('meeting', 'Meeting'), ('visit', 'Campus Visit'), ('demo', 'Demo Session'), ('note', 'Note'), ('status_change', 'Status Change'), ('broadcast', 'Broadcast Received')], max_length=20, verbose_name='Activity Type')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('description', models.TextField(verbose_name='Description')),
                ('outcome', models.CharField(blank=True, choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('no_response', 'No Response'), ('callback_requested', 'Callback Requested'), ('meeting_scheduled', 'Meeting Scheduled'), ('interested', 'Expressed Interest'), ('not_interested', 'Not Interested')], max_length=20, verbose_name='Outcome')),
                ('activity_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Activity Date')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (minutes)')),
                ('follow_up_required', models.BooleanField(default=False, verbose_name='Follow-up Required')),
                ('follow_up_date', models.DateField(blank=True, null=True, verbose_name='Follow-up Date')),
                ('follow_up_notes', models.TextField(blank=True, verbose_name='Follow-up Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='xbroadcast.lead')),
                ('related_broadcast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_activities', to='xbroadcast.broadcast')),
            ],
            options={
                'verbose_name': 'Lead Activity',
                'verbose_name_plural': 'Lead Activities',
                'ordering': ['-activity_date'],
            },
        ),
        migrations.CreateModel(
            name='LeadScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement_score', models.PositiveIntegerField(default=0, verbose_name='Engagement Score')),
                ('interest_score', models.PositiveIntegerField(default=0, verbose_name='Interest Score')),
                ('demographic_score', models.PositiveIntegerField(default=0, verbose_name='Demographic Score')),
                ('behavior_score', models.PositiveIntegerField(default=0, verbose_name='Behavior Score')),
                ('total_score', models.PositiveIntegerField(default=0, verbose_name='Total Score')),
                ('grade', models.CharField(choices=[('A', 'A - Hot Lead'), ('B', 'B - Warm Lead'), ('C', 'C - Cold Lead'), ('D', 'D - Poor Lead')], default='C', max_length=1, verbose_name='Lead Grade')),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('lead', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to='xbroadcast.lead')),
            ],
            options={
                'verbose_name': 'Lead Score',
                'verbose_name_plural': 'Lead Scores',
            },
        ),
        migrations.CreateModel(
            name='CommunicationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('communication_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('whatsapp', 'WhatsApp'), ('call', 'Phone Call'), ('broadcast', 'Broadcast'), ('notification', 'System Notification')], max_length=20)),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='Subject')),
                ('content', models.TextField(verbose_name='Content')),
                ('recipient_type', models.CharField(choices=[('student', 'Student'), ('lead', 'Lead'), ('faculty', 'Faculty'), ('parent', 'Parent'), ('custom', 'Custom')], max_length=20)),
                ('recipient_name', models.CharField(max_length=100, verbose_name='Recipient Name')),
                ('recipient_contact', models.CharField(max_length=200, verbose_name='Recipient Contact')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('replied', 'Replied')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Cost (KWD)')),
                ('provider', models.CharField(blank=True, max_length=100, verbose_name='Service Provider')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Retry Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('broadcast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='communication_logs', to='xbroadcast.broadcast')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='communications', to='xstudent.newstudent')),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='communications', to='xbroadcast.lead')),
            ],
            options={
                'verbose_name': 'Communication Log',
                'verbose_name_plural': 'Communication Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['communication_type', 'status'], name='xbroadcast__communi_3cf7dc_idx'), models.Index(fields=['created_at'], name='xbroadcast__created_0ea99f_idx'), models.Index(fields=['recipient_type'], name='xbroadcast__recipie_ac64fb_idx')],
            },
        ),
        migrations.CreateModel(
            name='BroadcastRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_type', models.CharField(choices=[('student', 'Student'), ('lead', 'Lead'), ('custom', 'Custom Contact')], max_length=20, verbose_name='Recipient Type')),
                ('custom_name', models.CharField(blank=True, max_length=100, verbose_name='Custom Name')),
                ('custom_email', models.EmailField(blank=True, max_length=254, verbose_name='Custom Email')),
                ('custom_phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Custom Phone')),
                ('sms_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('replied', 'Replied')], default='pending', max_length=20)),
                ('email_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('replied', 'Replied')], default='pending', max_length=20)),
                ('whatsapp_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('replied', 'Replied')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('replied_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Retry Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='xbroadcast.broadcast')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='broadcast_history', to='xstudent.newstudent')),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='broadcast_history', to='xbroadcast.lead')),
            ],
            options={
                'verbose_name': 'Broadcast Recipient',
                'verbose_name_plural': 'Broadcast Recipients',
                'ordering': ['-created_at'],
                'unique_together': {('broadcast', 'student', 'lead')},
            },
        ),
    ]
