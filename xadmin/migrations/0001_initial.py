# Generated by Django 5.2.1 on 2025-07-17 13:53

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Role Name')),
                ('role_type', models.CharField(choices=[('admin', 'Administrator'), ('staff', 'Staff'), ('faculty', 'Faculty'), ('student', 'Student'), ('parent', 'Parent'), ('support', 'Support Staff'), ('readonly', 'Read Only')], max_length=20, verbose_name='Role Type')),
                ('description', models.TextField(verbose_name='Role Description')),
                ('can_create', models.BooleanField(default=False, verbose_name='Can Create Records')),
                ('can_edit', models.BooleanField(default=False, verbose_name='Can Edit Records')),
                ('can_delete', models.BooleanField(default=False, verbose_name='Can Delete Records')),
                ('can_view_all', models.BooleanField(default=False, verbose_name='Can View All Records')),
                ('can_export', models.BooleanField(default=False, verbose_name='Can Export Data')),
                ('can_import', models.BooleanField(default=False, verbose_name='Can Import Data')),
                ('access_students', models.BooleanField(default=False, verbose_name='Access Student Module')),
                ('access_courses', models.BooleanField(default=False, verbose_name='Access Course Module')),
                ('access_fees', models.BooleanField(default=False, verbose_name='Access Fee Module')),
                ('access_marks', models.BooleanField(default=False, verbose_name='Access Marks Module')),
                ('access_faculty', models.BooleanField(default=False, verbose_name='Access Faculty Module')),
                ('access_batches', models.BooleanField(default=False, verbose_name='Access Batch Module')),
                ('access_transport', models.BooleanField(default=False, verbose_name='Access Transport Module')),
                ('access_kits', models.BooleanField(default=False, verbose_name='Access Kit Module')),
                ('access_broadcasts', models.BooleanField(default=False, verbose_name='Access Broadcast Module')),
                ('access_leads', models.BooleanField(default=False, verbose_name='Access Lead Module')),
                ('access_reports', models.BooleanField(default=False, verbose_name='Access Reports')),
                ('access_admin', models.BooleanField(default=False, verbose_name='Access Admin Panel')),
                ('can_view_finances', models.BooleanField(default=False, verbose_name='Can View Financial Data')),
                ('can_process_payments', models.BooleanField(default=False, verbose_name='Can Process Payments')),
                ('can_generate_invoices', models.BooleanField(default=False, verbose_name='Can Generate Invoices')),
                ('can_backup_restore', models.BooleanField(default=False, verbose_name='Can Backup/Restore')),
                ('can_manage_users', models.BooleanField(default=False, verbose_name='Can Manage Users')),
                ('can_view_audit_logs', models.BooleanField(default=False, verbose_name='Can View Audit Logs')),
                ('can_configure_system', models.BooleanField(default=False, verbose_name='Can Configure System')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Role')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Role',
                'verbose_name_plural': 'System Roles',
                'ordering': ['role_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SystemBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_id', models.CharField(max_length=20, unique=True, verbose_name='Backup ID')),
                ('backup_type', models.CharField(choices=[('full', 'Full Backup'), ('incremental', 'Incremental Backup'), ('differential', 'Differential Backup'), ('database_only', 'Database Only'), ('files_only', 'Files Only')], max_length=20, verbose_name='Backup Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('is_scheduled', models.BooleanField(default=False, verbose_name='Scheduled Backup')),
                ('schedule_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('manual', 'Manual')], default='manual', max_length=20, verbose_name='Schedule Frequency')),
                ('filename', models.CharField(blank=True, max_length=255, verbose_name='Backup Filename')),
                ('file_path', models.TextField(blank=True, verbose_name='File Path')),
                ('file_size_bytes', models.BigIntegerField(blank=True, null=True, verbose_name='File Size (bytes)')),
                ('compression_ratio', models.FloatField(blank=True, null=True, verbose_name='Compression Ratio')),
                ('includes_database', models.BooleanField(default=True, verbose_name='Includes Database')),
                ('includes_media', models.BooleanField(default=True, verbose_name='Includes Media Files')),
                ('includes_config', models.BooleanField(default=True, verbose_name='Includes Configuration')),
                ('total_records', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Records')),
                ('total_files', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Files')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (seconds)')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('warning_count', models.PositiveIntegerField(default=0, verbose_name='Warning Count')),
                ('storage_location', models.CharField(blank=True, max_length=200, verbose_name='Storage Location')),
                ('checksum', models.CharField(blank=True, max_length=64, verbose_name='Checksum (SHA-256)')),
                ('retention_days', models.PositiveIntegerField(default=30, verbose_name='Retention Days')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expires At')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Backup',
                'verbose_name_plural': 'System Backups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True, verbose_name='Configuration Key')),
                ('config_type', models.CharField(choices=[('general', 'General'), ('security', 'Security'), ('email', 'Email'), ('sms', 'SMS'), ('backup', 'Backup'), ('notification', 'Notification'), ('integration', 'Integration'), ('ui', 'User Interface')], max_length=20, verbose_name='Configuration Type')),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON'), ('list', 'List')], default='string', max_length=20, verbose_name='Data Type')),
                ('value', models.TextField(verbose_name='Configuration Value')),
                ('default_value', models.TextField(blank=True, verbose_name='Default Value')),
                ('name', models.CharField(max_length=200, verbose_name='Display Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('is_sensitive', models.BooleanField(default=False, verbose_name='Sensitive Data')),
                ('is_readonly', models.BooleanField(default=False, verbose_name='Read Only')),
                ('validation_rules', models.TextField(blank=True, verbose_name='Validation Rules (JSON)')),
                ('choices', models.TextField(blank=True, verbose_name='Allowed Choices (JSON)')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
                'ordering': ['config_type', 'key'],
            },
        ),
        migrations.CreateModel(
            name='SystemRestore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restore_id', models.CharField(max_length=20, unique=True, verbose_name='Restore ID')),
                ('restore_type', models.CharField(choices=[('full', 'Full Restore'), ('database_only', 'Database Only'), ('files_only', 'Files Only'), ('selective', 'Selective Restore')], max_length=20, verbose_name='Restore Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('restore_database', models.BooleanField(default=True, verbose_name='Restore Database')),
                ('restore_media', models.BooleanField(default=True, verbose_name='Restore Media Files')),
                ('restore_config', models.BooleanField(default=False, verbose_name='Restore Configuration')),
                ('target_environment', models.CharField(blank=True, max_length=100, verbose_name='Target Environment')),
                ('target_path', models.TextField(blank=True, verbose_name='Target Path')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (seconds)')),
                ('progress_percentage', models.PositiveIntegerField(default=0, verbose_name='Progress (%)')),
                ('current_operation', models.CharField(blank=True, max_length=200, verbose_name='Current Operation')),
                ('records_restored', models.PositiveIntegerField(blank=True, null=True, verbose_name='Records Restored')),
                ('files_restored', models.PositiveIntegerField(blank=True, null=True, verbose_name='Files Restored')),
                ('error_count', models.PositiveIntegerField(default=0, verbose_name='Error Count')),
                ('warning_count', models.PositiveIntegerField(default=0, verbose_name='Warning Count')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('error_log', models.TextField(blank=True, verbose_name='Error Log')),
                ('requires_approval', models.BooleanField(default=True, verbose_name='Requires Approval')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Approval Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_restores', to=settings.AUTH_USER_MODEL)),
                ('backup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restores', to='xadmin.systembackup')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_restores', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Restore',
                'verbose_name_plural': 'System Restores',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(blank=True, max_length=20, unique=True, verbose_name='Employee ID')),
                ('phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Department')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Position')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('pending', 'Pending Activation')], default='active', max_length=20)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Last Login IP')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Failed Login Attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name='Account Locked Until')),
                ('force_password_change', models.BooleanField(default=False, verbose_name='Force Password Change')),
                ('session_timeout_minutes', models.PositiveIntegerField(default=60, verbose_name='Session Timeout (minutes)')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS Notifications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('system_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='xadmin.systemrole')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('read', 'Read'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Login Failed'), ('export', 'Export'), ('import', 'Import'), ('backup', 'Backup'), ('restore', 'Restore'), ('config_change', 'Configuration Change'), ('payment', 'Payment'), ('broadcast', 'Broadcast'), ('system', 'System Action')], max_length=20, verbose_name='Action')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical'), ('security', 'Security')], default='info', max_length=20, verbose_name='Severity')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(verbose_name='Description')),
                ('table_name', models.CharField(blank=True, max_length=100, verbose_name='Table Name')),
                ('record_id', models.CharField(blank=True, max_length=100, verbose_name='Record ID')),
                ('old_values', models.TextField(blank=True, verbose_name='Old Values (JSON)')),
                ('new_values', models.TextField(blank=True, verbose_name='New Values (JSON)')),
                ('changed_fields', models.TextField(blank=True, verbose_name='Changed Fields')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('request_method', models.CharField(blank=True, max_length=10, verbose_name='Request Method')),
                ('request_path', models.TextField(blank=True, verbose_name='Request Path')),
                ('module', models.CharField(blank=True, max_length=50, verbose_name='Module')),
                ('function', models.CharField(blank=True, max_length=100, verbose_name='Function/View')),
                ('session_key', models.CharField(blank=True, max_length=40, verbose_name='Session Key')),
                ('server_name', models.CharField(blank=True, max_length=100, verbose_name='Server Name')),
                ('process_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Process ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='xadmin_audi_user_id_9df79c_idx'), models.Index(fields=['action', 'timestamp'], name='xadmin_audi_action_46ea94_idx'), models.Index(fields=['severity', 'timestamp'], name='xadmin_audi_severit_c6e9d2_idx'), models.Index(fields=['table_name', 'timestamp'], name='xadmin_audi_table_n_26aaad_idx'), models.Index(fields=['ip_address'], name='xadmin_audi_ip_addr_99fed9_idx')],
            },
        ),
        migrations.CreateModel(
            name='SecurityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_id', models.CharField(max_length=20, unique=True, verbose_name='Incident ID')),
                ('incident_type', models.CharField(choices=[('failed_login', 'Failed Login'), ('account_lockout', 'Account Lockout'), ('permission_denied', 'Permission Denied'), ('suspicious_activity', 'Suspicious Activity'), ('data_breach_attempt', 'Data Breach Attempt'), ('unauthorized_access', 'Unauthorized Access'), ('privilege_escalation', 'Privilege Escalation'), ('sql_injection', 'SQL Injection Attempt'), ('xss_attempt', 'XSS Attempt'), ('file_upload', 'Suspicious File Upload'), ('mass_download', 'Mass Data Download')], max_length=30, verbose_name='Incident Type')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20, verbose_name='Risk Level')),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='open', max_length=20, verbose_name='Status')),
                ('username_attempted', models.CharField(blank=True, max_length=150, verbose_name='Username Attempted')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('request_method', models.CharField(blank=True, max_length=10, verbose_name='Request Method')),
                ('request_path', models.TextField(blank=True, verbose_name='Request Path')),
                ('request_data', models.TextField(blank=True, verbose_name='Request Data')),
                ('response_code', models.PositiveIntegerField(blank=True, null=True, verbose_name='Response Code')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('description', models.TextField(verbose_name='Description')),
                ('affected_resources', models.TextField(blank=True, verbose_name='Affected Resources')),
                ('potential_impact', models.TextField(blank=True, verbose_name='Potential Impact')),
                ('investigation_notes', models.TextField(blank=True, verbose_name='Investigation Notes')),
                ('resolution', models.TextField(blank=True, verbose_name='Resolution')),
                ('action_taken', models.TextField(blank=True, verbose_name='Action Taken')),
                ('prevention_measures', models.TextField(blank=True, verbose_name='Prevention Measures')),
                ('detected_at', models.DateTimeField(auto_now_add=True, verbose_name='Detected At')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('investigated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_incidents', to=settings.AUTH_USER_MODEL, verbose_name='Investigated By')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Log',
                'verbose_name_plural': 'Security Logs',
                'ordering': ['-detected_at'],
                'indexes': [models.Index(fields=['incident_type', 'detected_at'], name='xadmin_secu_inciden_625d81_idx'), models.Index(fields=['risk_level', 'status'], name='xadmin_secu_risk_le_fd2954_idx'), models.Index(fields=['ip_address'], name='xadmin_secu_ip_addr_5cbe28_idx'), models.Index(fields=['user', 'detected_at'], name='xadmin_secu_user_id_49b3e8_idx')],
            },
        ),
    ]
