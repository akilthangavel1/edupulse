# Generated by Django 5.2.1 on 2025-07-17 12:44

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('xcoursefee', '0002_kit_coursekit_kitfee'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('faculty_id', models.CharField(max_length=20, unique=True, verbose_name='Faculty ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('emergency_contact', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Emergency Contact')),
                ('qualification', models.CharField(choices=[('bachelor', "Bachelor's Degree"), ('master', "Master's Degree"), ('phd', 'PhD'), ('diploma', 'Diploma'), ('certificate', 'Professional Certificate'), ('other', 'Other')], max_length=20, verbose_name='Highest Qualification')),
                ('specialization', models.CharField(max_length=200, verbose_name='Specialization/Subject Area')),
                ('experience_years', models.PositiveIntegerField(verbose_name='Years of Experience')),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('freelance', 'Freelance')], default='full_time', max_length=20)),
                ('join_date', models.DateField(verbose_name='Joining Date')),
                ('address_line_1', models.CharField(max_length=200, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, max_length=200, verbose_name='Address Line 2')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(default='Kuwait', max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal Code')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='active', max_length=20)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Hourly Rate (KWD)')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='faculty_photos/', verbose_name='Profile Picture')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('can_teach_courses', models.ManyToManyField(blank=True, to='xcoursefee.course', verbose_name='Can Teach Courses')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Faculty',
                'verbose_name_plural': 'Faculty',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='ExamRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=20, unique=True, verbose_name='Request ID')),
                ('exam_title', models.CharField(max_length=200, verbose_name='Exam Title')),
                ('exam_type', models.CharField(choices=[('quiz', 'Quiz'), ('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('assignment', 'Assignment'), ('project', 'Project Evaluation'), ('oral', 'Oral Exam'), ('practical', 'Practical Exam')], max_length=20, verbose_name='Exam Type')),
                ('description', models.TextField(blank=True, verbose_name='Exam Description')),
                ('proposed_date', models.DateField(verbose_name='Proposed Exam Date')),
                ('proposed_start_time', models.TimeField(verbose_name='Proposed Start Time')),
                ('duration_hours', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.25'))], verbose_name='Duration (Hours)')),
                ('total_marks', models.PositiveIntegerField(verbose_name='Total Marks')),
                ('passing_marks', models.PositiveIntegerField(verbose_name='Passing Marks')),
                ('number_of_questions', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Questions')),
                ('room_requirements', models.TextField(blank=True, verbose_name='Room Requirements')),
                ('special_materials', models.TextField(blank=True, verbose_name='Special Materials Required')),
                ('supervision_required', models.BooleanField(default=True, verbose_name='Supervision Required')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True, verbose_name='Request Date')),
                ('review_date', models.DateTimeField(blank=True, null=True, verbose_name='Review Date')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Approval/Rejection Notes')),
                ('final_date', models.DateField(blank=True, null=True, verbose_name='Final Exam Date')),
                ('final_start_time', models.TimeField(blank=True, null=True, verbose_name='Final Start Time')),
                ('assigned_room', models.CharField(blank=True, max_length=100, verbose_name='Assigned Room')),
                ('notification_sent', models.BooleanField(default=False, verbose_name='Students Notified')),
                ('notification_date', models.DateTimeField(blank=True, null=True, verbose_name='Notification Date')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xcoursefee.course', verbose_name='Course')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_exam_requests', to=settings.AUTH_USER_MODEL)),
                ('target_students', models.ManyToManyField(blank=True, to='xcoursefee.studentenrollment', verbose_name='Target Students')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_requests', to='xtrainer.faculty')),
            ],
            options={
                'verbose_name': 'Exam Request',
                'verbose_name_plural': 'Exam Requests',
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='FacultyLeaveRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=20, unique=True, verbose_name='Request ID')),
                ('request_type', models.CharField(choices=[('leave', 'Leave Request'), ('batch_time_change', 'Batch Time Change'), ('emergency_leave', 'Emergency Leave'), ('sick_leave', 'Sick Leave'), ('vacation', 'Vacation Leave')], max_length=20, verbose_name='Request Type')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='End Time')),
                ('affected_batches', models.TextField(blank=True, verbose_name='Affected Batches/Classes')),
                ('reason', models.TextField(verbose_name='Reason for Request')),
                ('backup_required', models.BooleanField(default=True, verbose_name='Backup Faculty Required')),
                ('backup_notes', models.TextField(blank=True, verbose_name='Backup Arrangement Notes')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True, verbose_name='Request Date')),
                ('review_date', models.DateTimeField(blank=True, null=True, verbose_name='Review Date')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Approval/Rejection Notes')),
                ('notification_sent', models.BooleanField(default=False, verbose_name='Notification Sent')),
                ('notification_date', models.DateTimeField(blank=True, null=True, verbose_name='Notification Date')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_courses', models.ManyToManyField(blank=True, to='xcoursefee.course', verbose_name='Affected Courses')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_requests', to='xtrainer.faculty')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_leave_requests', to=settings.AUTH_USER_MODEL)),
                ('suggested_backup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_requests', to='xtrainer.faculty', verbose_name='Suggested Backup Faculty')),
            ],
            options={
                'verbose_name': 'Faculty Leave Request',
                'verbose_name_plural': 'Faculty Leave Requests',
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='FacultyOnboarding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=20, unique=True, verbose_name='Request ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be valid', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('qualification', models.CharField(choices=[('bachelor', "Bachelor's Degree"), ('master', "Master's Degree"), ('phd', 'PhD'), ('diploma', 'Diploma'), ('certificate', 'Professional Certificate'), ('other', 'Other')], max_length=20)),
                ('specialization', models.CharField(max_length=200, verbose_name='Specialization')),
                ('experience_years', models.PositiveIntegerField(verbose_name='Years of Experience')),
                ('preferred_employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('freelance', 'Freelance')], max_length=20)),
                ('expected_hourly_rate', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Expected Hourly Rate (KWD)')),
                ('availability_notes', models.TextField(blank=True, verbose_name='Availability Notes')),
                ('cv_file', models.FileField(blank=True, null=True, upload_to='faculty_documents/', verbose_name='CV/Resume')),
                ('certificates_file', models.FileField(blank=True, null=True, upload_to='faculty_documents/', verbose_name='Certificates')),
                ('other_documents', models.FileField(blank=True, null=True, upload_to='faculty_documents/', verbose_name='Other Documents')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Onboarding Completed')], default='pending', max_length=20)),
                ('application_date', models.DateTimeField(auto_now_add=True, verbose_name='Application Date')),
                ('review_date', models.DateTimeField(blank=True, null=True, verbose_name='Review Date')),
                ('review_notes', models.TextField(blank=True, verbose_name='Review Notes')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Approval Date')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Approval Notes')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_onboardings', to=settings.AUTH_USER_MODEL)),
                ('created_faculty', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='xtrainer.faculty', verbose_name='Created Faculty')),
                ('preferred_courses', models.ManyToManyField(blank=True, to='xcoursefee.course', verbose_name='Preferred Courses to Teach')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_onboardings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Faculty Onboarding',
                'verbose_name_plural': 'Faculty Onboardings',
                'ordering': ['-application_date'],
            },
        ),
        migrations.CreateModel(
            name='FacultyPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=20, unique=True, verbose_name='Payment ID')),
                ('payment_type', models.CharField(choices=[('regular', 'Regular Teaching'), ('backup', 'Backup Classes'), ('overtime', 'Overtime'), ('bonus', 'Bonus'), ('exam_supervision', 'Exam Supervision'), ('special_project', 'Special Project')], max_length=20, verbose_name='Payment Type')),
                ('period_start', models.DateField(verbose_name='Period Start Date')),
                ('period_end', models.DateField(verbose_name='Period End Date')),
                ('total_hours', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Total Hours')),
                ('hourly_rate', models.DecimalField(decimal_places=3, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Hourly Rate (KWD)')),
                ('gross_amount', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Gross Amount (KWD)')),
                ('deductions', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, verbose_name='Deductions (KWD)')),
                ('bonus_amount', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, verbose_name='Bonus Amount (KWD)')),
                ('net_amount', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Net Amount (KWD)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payment_method', models.CharField(blank=True, choices=[('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('online', 'Online Payment')], max_length=20)),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Payment Date')),
                ('reference_number', models.CharField(blank=True, max_length=100, verbose_name='Reference Number')),
                ('notes', models.TextField(blank=True, verbose_name='Payment Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payments', to=settings.AUTH_USER_MODEL)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='xtrainer.faculty')),
                ('generated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_payments', to=settings.AUTH_USER_MODEL)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Faculty Payment',
                'verbose_name_plural': 'Faculty Payments',
                'ordering': ['-period_end', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('whatsapp', 'WhatsApp'), ('system', 'System Notification')], max_length=20)),
                ('recipient_type', models.CharField(max_length=50, verbose_name='Recipient Type')),
                ('recipient_id', models.PositiveIntegerField(verbose_name='Recipient ID')),
                ('recipient_contact', models.CharField(max_length=100, verbose_name='Recipient Contact')),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Message Content')),
                ('related_model', models.CharField(blank=True, max_length=50, verbose_name='Related Model')),
                ('related_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Related Object ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('delivered', 'Delivered')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sent_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Sent By')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FacultyAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('scheduled_start_time', models.TimeField(verbose_name='Scheduled Start Time')),
                ('scheduled_end_time', models.TimeField(verbose_name='Scheduled End Time')),
                ('actual_start_time', models.TimeField(blank=True, null=True, verbose_name='Actual Start Time')),
                ('actual_end_time', models.TimeField(blank=True, null=True, verbose_name='Actual End Time')),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('partial', 'Partial Attendance')], max_length=20, verbose_name='Attendance Status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xcoursefee.course', verbose_name='Course')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='xtrainer.faculty')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Recorded By')),
            ],
            options={
                'verbose_name': 'Faculty Attendance',
                'verbose_name_plural': 'Faculty Attendance Records',
                'ordering': ['-date', 'faculty'],
                'unique_together': {('faculty', 'course', 'date')},
            },
        ),
        migrations.CreateModel(
            name='BackupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_id', models.CharField(max_length=20, unique=True, verbose_name='Schedule ID')),
                ('batch_name', models.CharField(max_length=100, verbose_name='Batch/Class Name')),
                ('date', models.DateField(verbose_name='Date')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(verbose_name='End Time')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='scheduled', max_length=20)),
                ('backup_confirmed', models.BooleanField(default=False, verbose_name='Backup Confirmed')),
                ('backup_confirmation_date', models.DateTimeField(blank=True, null=True)),
                ('notification_sent_to_backup', models.BooleanField(default=False)),
                ('notification_sent_to_students', models.BooleanField(default=False)),
                ('notification_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, verbose_name='Additional Notes')),
                ('room_location', models.CharField(blank=True, max_length=100, verbose_name='Room/Location')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xcoursefee.course', verbose_name='Course')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('backup_faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_schedules', to='xtrainer.faculty', verbose_name='Backup Faculty')),
                ('original_faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='original_schedules', to='xtrainer.faculty', verbose_name='Original Faculty')),
                ('leave_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='backup_schedules', to='xtrainer.facultyleaverequest', verbose_name='Related Leave Request')),
            ],
            options={
                'verbose_name': 'Backup Schedule',
                'verbose_name_plural': 'Backup Schedules',
                'ordering': ['date', 'start_time'],
                'unique_together': {('backup_faculty', 'date', 'start_time', 'course')},
            },
        ),
    ]
